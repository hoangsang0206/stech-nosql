@model ReviewMVM

@{
    User? reviewerUser = Model.User;
    string reviewerAvatar = reviewerUser?.Avatar ?? "/images/user-no-image.svg";
    string reviewerName = reviewerUser?.FullName ?? Model.ReviewerName ?? "Người dùng";

    int rating = Model.Rating;

    IEnumerable<ReviewImage> reviewImages = Model.ReviewImages;
    IEnumerable<ReviewReplyMVM> reviewReplies = Model.ReviewReplies;

    bool isAuthenticated = User.Identity != null && User.Identity.IsAuthenticated;
}

<div class="review-item">
    <div class="review-item-main">

        <div class="d-flex align-items-center gap-2">
            <div class="review-avatar lazy-loading">
                <img lazy-src="@reviewerAvatar" alt="" />
            </div>
            <strong>@reviewerName</strong>
        </div>

        <div class="mt-2 d-flex align-items-center gap-3">

            @await Html.PartialAsync("PartialViews/Review_StarGroup", rating)

            <div>
                @if (Model.IsPurchased == true)
                {
                    <div class="review-badge success">
                        <i class="fa-regular fa-circle-check"></i>
                        <span>Đã mua hàng</span>
                    </div>
                }
                else
                {
                    <div class="review-badge">
                        <span>Chưa mua hàng</span>
                    </div>
                }
            </div>
        </div>

        <div class="mt-3">
            <span>@Model.Content</span>
        </div>

        @if (reviewImages.Count() > 0)
        {
            <div class="mt-3 d-flex gap-2">
                @foreach (ReviewImage image in reviewImages)
                {
                    <div class="review-image lazy-loading">
                        <img lazy-src="@image.ImageUrl" alt="" />
                    </div>
                }
            </div>
        }

        <div class="d-flex align-items-center gap-4 mt-3">
            <a href="javascript:" class="d-flex align-items-center gap-1 like-review @(!isAuthenticated ? "not-logged-in" : "")" data-review="@Model.Id" data-like="@Model.TotalLike">
                <i class="fa-regular fa-thumbs-up"></i>
                <span>Hứu ích (@Model.TotalLike)</span>
            </a>

            <a href="javascript:" class="d-flex align-items-center gap-1 reply-review @(!isAuthenticated ? "not-logged-in" : "")" data-review="@Model.Id">
                <i class="fa-regular fa-comment-dots"></i>
                <span>Phản hồi</span>
            </a>

            <span class="text-secondary review-time mt-1">@Model.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
        </div>

    </div>

    @if (reviewReplies.Count() > 0)
    {
        <div class="review-replies">
            @foreach (ReviewReplyMVM reply in reviewReplies)
            {
                @await Html.PartialAsync("PartialViews/Review_Reply", reply)
            }
        </div>
    }

    <div class="review-reply-form-container">
        @await Html.PartialAsync("PartialViews/Review_Post_Reply", new ReviewReplyVM { ReviewId = Model.Id })
    </div>

</div>
